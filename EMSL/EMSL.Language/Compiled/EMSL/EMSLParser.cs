//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:/DevFile/EMSL/EMSL/EMSL.Language/EMSL.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace EMSL {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class EMSLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NAME=1, SOURCE=2, TARGET=3, WITH=4, HOSTNAME=5, PORT=6, RESOURCE=7, OF=8, 
		TYPE=9, RESOURCE_TYPE=10, FROM=11, TO=12, REQUIRES=13, AND=14, INT_LITERAL=15, 
		STRING_LITERAL=16, IGNORED_WS=17;
	public const int
		RULE_specification = 0, RULE_name_definition = 1, RULE_source_definition = 2, 
		RULE_target_definition = 3, RULE_resource_definition = 4, RULE_requires_definition_value = 5;
	public static readonly string[] ruleNames = {
		"specification", "name_definition", "source_definition", "target_definition", 
		"resource_definition", "requires_definition_value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'NAME'", "'SOURCE'", "'TARGET'", "'WITH'", "'HOSTNAME'", "'PORT'", 
		"'RESOURCE'", "'OF'", "'TYPE'", null, "'FROM'", "'TO'", "'REQUIRES'", 
		"'AND'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NAME", "SOURCE", "TARGET", "WITH", "HOSTNAME", "PORT", "RESOURCE", 
		"OF", "TYPE", "RESOURCE_TYPE", "FROM", "TO", "REQUIRES", "AND", "INT_LITERAL", 
		"STRING_LITERAL", "IGNORED_WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EMSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EMSLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EMSLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EMSLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(EMSLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_definitionContext name_definition() {
			return GetRuleContext<Name_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Source_definitionContext[] source_definition() {
			return GetRuleContexts<Source_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Source_definitionContext source_definition(int i) {
			return GetRuleContext<Source_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_definitionContext[] target_definition() {
			return GetRuleContexts<Target_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_definitionContext target_definition(int i) {
			return GetRuleContext<Target_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Resource_definitionContext[] resource_definition() {
			return GetRuleContexts<Resource_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Resource_definitionContext resource_definition(int i) {
			return GetRuleContext<Resource_definitionContext>(i);
		}
		public SpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEMSLListener typedListener = listener as IEMSLListener;
			if (typedListener != null) typedListener.EnterSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEMSLListener typedListener = listener as IEMSLListener;
			if (typedListener != null) typedListener.ExitSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEMSLVisitor<TResult> typedVisitor = visitor as IEMSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificationContext specification() {
		SpecificationContext _localctx = new SpecificationContext(Context, State);
		EnterRule(_localctx, 0, RULE_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 12;
				name_definition();
				}
			}

			State = 16;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 15;
				source_definition();
				}
				}
				State = 18;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SOURCE );
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 20;
				target_definition();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TARGET );
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==RESOURCE) {
				{
				{
				State = 25;
				resource_definition();
				}
				}
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 31;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(EMSLParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(EMSLParser.STRING_LITERAL, 0); }
		public Name_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEMSLListener typedListener = listener as IEMSLListener;
			if (typedListener != null) typedListener.EnterName_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEMSLListener typedListener = listener as IEMSLListener;
			if (typedListener != null) typedListener.ExitName_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEMSLVisitor<TResult> typedVisitor = visitor as IEMSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Name_definitionContext name_definition() {
		Name_definitionContext _localctx = new Name_definitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_name_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			Match(NAME);
			State = 34;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Source_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(EMSLParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(EMSLParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(EMSLParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(EMSLParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(EMSLParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTNAME() { return GetToken(EMSLParser.HOSTNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(EMSLParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_LITERAL() { return GetToken(EMSLParser.INT_LITERAL, 0); }
		public Source_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEMSLListener typedListener = listener as IEMSLListener;
			if (typedListener != null) typedListener.EnterSource_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEMSLListener typedListener = listener as IEMSLListener;
			if (typedListener != null) typedListener.ExitSource_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEMSLVisitor<TResult> typedVisitor = visitor as IEMSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSource_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Source_definitionContext source_definition() {
		Source_definitionContext _localctx = new Source_definitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_source_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(SOURCE);
			State = 37;
			Match(STRING_LITERAL);
			State = 38;
			Match(WITH);
			State = 39;
			Match(HOSTNAME);
			State = 40;
			Match(STRING_LITERAL);
			State = 41;
			Match(WITH);
			State = 42;
			Match(PORT);
			State = 43;
			Match(INT_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET() { return GetToken(EMSLParser.TARGET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(EMSLParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(EMSLParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(EMSLParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(EMSLParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTNAME() { return GetToken(EMSLParser.HOSTNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(EMSLParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_LITERAL() { return GetToken(EMSLParser.INT_LITERAL, 0); }
		public Target_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEMSLListener typedListener = listener as IEMSLListener;
			if (typedListener != null) typedListener.EnterTarget_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEMSLListener typedListener = listener as IEMSLListener;
			if (typedListener != null) typedListener.ExitTarget_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEMSLVisitor<TResult> typedVisitor = visitor as IEMSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Target_definitionContext target_definition() {
		Target_definitionContext _localctx = new Target_definitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_target_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(TARGET);
			State = 46;
			Match(STRING_LITERAL);
			State = 47;
			Match(WITH);
			State = 48;
			Match(HOSTNAME);
			State = 49;
			Match(STRING_LITERAL);
			State = 50;
			Match(WITH);
			State = 51;
			Match(PORT);
			State = 52;
			Match(INT_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE() { return GetToken(EMSLParser.RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(EMSLParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(EMSLParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(EMSLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(EMSLParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_TYPE() { return GetToken(EMSLParser.RESOURCE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(EMSLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(EMSLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRES() { return GetToken(EMSLParser.REQUIRES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Requires_definition_valueContext requires_definition_value() {
			return GetRuleContext<Requires_definition_valueContext>(0);
		}
		public Resource_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEMSLListener typedListener = listener as IEMSLListener;
			if (typedListener != null) typedListener.EnterResource_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEMSLListener typedListener = listener as IEMSLListener;
			if (typedListener != null) typedListener.ExitResource_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEMSLVisitor<TResult> typedVisitor = visitor as IEMSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Resource_definitionContext resource_definition() {
		Resource_definitionContext _localctx = new Resource_definitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_resource_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(RESOURCE);
			State = 55;
			Match(STRING_LITERAL);
			State = 56;
			Match(OF);
			State = 57;
			Match(TYPE);
			State = 58;
			Match(RESOURCE_TYPE);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 59;
				Match(FROM);
				State = 60;
				Match(STRING_LITERAL);
				}
			}

			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO) {
				{
				State = 63;
				Match(TO);
				State = 64;
				Match(STRING_LITERAL);
				}
			}

			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REQUIRES) {
				{
				State = 67;
				Match(REQUIRES);
				State = 68;
				requires_definition_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Requires_definition_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(EMSLParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(EMSLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Requires_definition_valueContext requires_definition_value() {
			return GetRuleContext<Requires_definition_valueContext>(0);
		}
		public Requires_definition_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requires_definition_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IEMSLListener typedListener = listener as IEMSLListener;
			if (typedListener != null) typedListener.EnterRequires_definition_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IEMSLListener typedListener = listener as IEMSLListener;
			if (typedListener != null) typedListener.ExitRequires_definition_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEMSLVisitor<TResult> typedVisitor = visitor as IEMSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequires_definition_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Requires_definition_valueContext requires_definition_value() {
		Requires_definition_valueContext _localctx = new Requires_definition_valueContext(Context, State);
		EnterRule(_localctx, 10, RULE_requires_definition_value);
		try {
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				Match(STRING_LITERAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				Match(STRING_LITERAL);
				State = 73;
				Match(AND);
				State = 74;
				requires_definition_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,17,78,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,3,0,14,8,
		0,1,0,4,0,17,8,0,11,0,12,0,18,1,0,4,0,22,8,0,11,0,12,0,23,1,0,5,0,27,8,
		0,10,0,12,0,30,9,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,
		4,62,8,4,1,4,1,4,3,4,66,8,4,1,4,1,4,3,4,70,8,4,1,5,1,5,1,5,1,5,3,5,76,
		8,5,1,5,0,0,6,0,2,4,6,8,10,0,0,79,0,13,1,0,0,0,2,33,1,0,0,0,4,36,1,0,0,
		0,6,45,1,0,0,0,8,54,1,0,0,0,10,75,1,0,0,0,12,14,3,2,1,0,13,12,1,0,0,0,
		13,14,1,0,0,0,14,16,1,0,0,0,15,17,3,4,2,0,16,15,1,0,0,0,17,18,1,0,0,0,
		18,16,1,0,0,0,18,19,1,0,0,0,19,21,1,0,0,0,20,22,3,6,3,0,21,20,1,0,0,0,
		22,23,1,0,0,0,23,21,1,0,0,0,23,24,1,0,0,0,24,28,1,0,0,0,25,27,3,8,4,0,
		26,25,1,0,0,0,27,30,1,0,0,0,28,26,1,0,0,0,28,29,1,0,0,0,29,31,1,0,0,0,
		30,28,1,0,0,0,31,32,5,0,0,1,32,1,1,0,0,0,33,34,5,1,0,0,34,35,5,16,0,0,
		35,3,1,0,0,0,36,37,5,2,0,0,37,38,5,16,0,0,38,39,5,4,0,0,39,40,5,5,0,0,
		40,41,5,16,0,0,41,42,5,4,0,0,42,43,5,6,0,0,43,44,5,15,0,0,44,5,1,0,0,0,
		45,46,5,3,0,0,46,47,5,16,0,0,47,48,5,4,0,0,48,49,5,5,0,0,49,50,5,16,0,
		0,50,51,5,4,0,0,51,52,5,6,0,0,52,53,5,15,0,0,53,7,1,0,0,0,54,55,5,7,0,
		0,55,56,5,16,0,0,56,57,5,8,0,0,57,58,5,9,0,0,58,61,5,10,0,0,59,60,5,11,
		0,0,60,62,5,16,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,65,1,0,0,0,63,64,5,12,
		0,0,64,66,5,16,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,69,1,0,0,0,67,68,5,13,
		0,0,68,70,3,10,5,0,69,67,1,0,0,0,69,70,1,0,0,0,70,9,1,0,0,0,71,76,5,16,
		0,0,72,73,5,16,0,0,73,74,5,14,0,0,74,76,3,10,5,0,75,71,1,0,0,0,75,72,1,
		0,0,0,76,11,1,0,0,0,8,13,18,23,28,61,65,69,75
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace EMSL
